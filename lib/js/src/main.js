// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array    = require("bs-platform/lib/js/array.js");
var Lodash     = require("lodash");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

console.log("Hello World");

var u = {
  x: {
    y: {
      z: 3
    }
  }
};

var json_foo = u.x;

var ocaml_string = "from OCaml";

function call_me(payload) {
  console.log(payload.msg.content + ocaml_string);
  return /* () */0;
}

console.log(call_me);

console.log(json_foo);

var my_array = /* array */[
  1,
  2,
  3,
  4,
  5,
  6
];

function range(i, j) {
  if (i > j) {
    return /* [] */0;
  } else {
    return /* :: */[
            i,
            range(i + 1 | 0, j)
          ];
  }
}

function sum(x, y) {
  return x + y | 0;
}

function sum_by_2(param) {
  return 2 + param | 0;
}

function exp5div7(x, y) {
  return Caml_int32.imul(Math.pow(x, y) | 0, 5) / 7 | 0;
}

var nums = $$Array.of_list(range(0, 10000));

var t0 = performance.now();

console.log($$Array.map(function (param) {
          return exp5div7(3, param);
        }, nums));

var t1 = performance.now();

console.log("Call to doSomething took " + (Pervasives.string_of_int(t1 - t0 | 0) + " milliseconds."));

var nums$1 = Lodash.range(0, 10000);

var t0$1 = performance.now();

console.log(Lodash.map(nums$1, function (param) {
          return exp5div7(3, param);
        }));

var t1$1 = performance.now();

console.log("Call to doSomething took " + (Pervasives.string_of_int(t1$1 - t0$1 | 0) + " milliseconds."));

console.log("nums");

var u2 = /* record */[
  /* x */33,
  /* y */22,
  /* z */"hi"
];

var u2_x = 33;

exports.u            = u;
exports.u2           = u2;
exports.json_foo     = json_foo;
exports.u2_x         = u2_x;
exports.ocaml_string = ocaml_string;
exports.call_me      = call_me;
exports.my_array     = my_array;
exports.range        = range;
exports.sum          = sum;
exports.sum_by_2     = sum_by_2;
exports.exp5div7     = exp5div7;
exports.nums         = nums$1;
exports.t0           = t0$1;
exports.t1           = t1$1;
/*  Not a pure module */
